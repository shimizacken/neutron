{"mappings":";;;;;;AEEO,IAAA,AAAK,mEAAA;IACV;;GAEC;IAED;;GAEC;WAPS;;;;ADGL,MAAM,4CAAU,CAAI,eAAmB,UAAU,KAAK,GAAK,CAChE,WAAwB,CAAA,GAAA,yCAAU,EAAE,OAAO;QAE3C,MAAM,WAAW,IAAI;QAErB;;GAEC,GACD,MAAM,UAAU,CAAC,kBACf,SAAS,MAAM,CAAC;QAElB;;GAEC,GACD,MAAM,QAAQ,CAAC;YACb,SAAS,GAAG,CAAC;YAEb,IAAI,aAAa,CAAA,GAAA,yCAAU,EAAE,MAAM,IAAI,YAAY,MACjD,oBAAoB,SAAS;YAG/B,OAAO,IAAM,QAAQ;QACvB;QAEA,MAAM,sBAAsB,CAC1B,SACA,WACA,gBACG,QAAQ,WAAW;QAExB;;GAEC,GACD,MAAM,OAAO,CAAC;YACZ,SAAS,OAAO,CAAC,CAAC,UAChB,oBAAoB,SAAS,WAAW;YAG1C,gBAAgB;YAChB,UAAU;QACZ;QAEA;;GAEC,GACD,MAAM,cAAc,IAAM,MAAM,IAAI,CAAC;QAErC,OAAO;mBACL;qBACA;kBACA;yBACA;QACF;IACF;AAKO,MAAM,4CAAgB,CAAI,WAC/B,4CAAa","sources":["src/neutron/index.ts","src/neutron/neutron.ts","src/neutron/types.ts"],"sourcesContent":["export { createNeutron } from \"./neutron\";\n","import { Watcher, Neutron, NeutronType } from \"./types\";\n\n/**\n * Neutron observer\n */\nexport const neutron = <T>(previousState?: T, emitted = false) => (\n  behavior: NeutronType = NeutronType.Default\n): Neutron<T> => {\n  const watchers = new Set<Watcher<T>>();\n\n  /**\n   * unsubscribes from current neutron\n   */\n  const abandon = (watcherToRemove: Watcher<T>) =>\n    watchers.delete(watcherToRemove);\n\n  /**\n   * subscribes to current neutron\n   */\n  const watch = (watcher: Watcher<T>) => {\n    watchers.add(watcher);\n\n    if (behavior === NeutronType.ReEmit && emitted === true) {\n      emitToSingleWatcher(watcher, previousState);\n    }\n\n    return () => abandon(watcher);\n  };\n\n  const emitToSingleWatcher = (\n    watcher: Watcher<T>,\n    nextState?: T,\n    previousState?: T\n  ) => watcher(nextState, previousState);\n\n  /**\n   * fires new data to all observers\n   */\n  const emit = (nextState?: T) => {\n    watchers.forEach((watcher) =>\n      emitToSingleWatcher(watcher, nextState, previousState)\n    );\n\n    previousState = nextState;\n    emitted = true;\n  };\n\n  /**\n   * return array of current watchers\n   */\n  const getWatchers = () => Array.from(watchers);\n\n  return {\n    watch,\n    abandon,\n    emit,\n    getWatchers,\n  };\n};\n\n/**\n * create a Neutron observer\n */\nexport const createNeutron = <T>(behavior?: NeutronType): Neutron<T> =>\n  neutron<T>()(behavior);\n","export type Watcher<T> = (next?: T, previous?: T) => void;\n\nexport enum NeutronType {\n  /**\n   * emit only when explicitly called\n   */\n  Default = \"default\",\n  /**\n   * always re-emit latest state to any new watcher\n   */\n  ReEmit = \"re-emit-for-new-watcher\",\n}\n\nexport interface Neutron<T> {\n  watch: (watcher: Watcher<T>) => () => boolean;\n  abandon: (watcher: Watcher<T>) => boolean;\n  emit: (nextState?: T) => void;\n  getWatchers: () => Array<Watcher<T>>;\n}\n"],"names":[],"version":3,"file":"index.js.map"}